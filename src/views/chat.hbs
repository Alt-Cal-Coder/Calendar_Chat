<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Group Chat</title>
    {{!-- <link rel="stylesheet" href="/styles/styles.css" /> --}}
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap');
        body {
            font-family: "Montserrat", sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            color: rgb(255, 255, 255);
            background-color: rgb(0, 0, 0);
        }

        #chat-container {
            width: 50rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            box-sizing: border-box;
            color: rgb(0, 0, 0);
            /* background-color: #8a8a8a; */
            /* box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); */
            background: linear-gradient(to bottom, white, #d8d8d8, #6e6e6e, white);
        }

        #messages {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #000000;
            border-radius: 5px;
            height: 30rem;
        }

        #messages::-webkit-scrollbar {
            width: 5px;
            background-color: #f5f5f5;
        }

        #messages::-webkit-scrollbar-thumb {
            background-color: #000000;
            border-radius: 5px;
        }

        #input-container {
            display: flex;
            gap: 10px;
        }

        #messageInput {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #000000;
            border-radius: 5px;
            font-family: "Montserrat", sans-serif;
        }

        #sendButton {
            padding: 10px 20px;
            background-color: #000000;
            color: #ffffff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-family: "Montserrat", sans-serif;
        }

        #sendButton:hover {
            background-color: #333333;
        }

        .message {
            max-width: 70%;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 10px;
            clear: both;
        }

        .message-content {
            margin-bottom: 5px;
        }

        .message .timestamp {
            font-size: 0.8em;
            color: #666666;
            display: block;
            display: flex;
            align-items: center;
            justify-content: end;
        }

        .message .username {
            margin-top: 0.6rem;
            font-size: 0.8rem;
            display: block;
            display: flex;
            align-items: center;
            justify-content: end;

        }

        .message .attachment {
            margin-top: 5px;
            display: flex;
            align-items: center;
            justify-content: end;
        }

        .message .attachment a {
            color: #0059ff;
            text-decoration: none;
        }

        .message .attachment a:hover {
            text-decoration: underline;
        }

        .sender {
            float: right;
            background-color: #ffffff;
            color: #000000;
        }

        .receiver {
            float: left;
            background-color: #000000;
            color: #ffffff;
        }

        #groupInfo {
            text-align: center;
            margin-bottom: 20px;
            font-weight: bold;
        }

        .system-message {
            clear: both;
            text-align: center;
            color: #666666;
            margin: 10px 0;
        }

        /* Notification button styles */
        #notificationButton {
            padding: 8px 15px;
            background-color: #000000;
            color: #ffffff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-family: "Montserrat", sans-serif;
            margin-left: 10px;
        }

        #notificationButton:hover {
            background-color: #333333;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .modal-header h3 {
            margin: 0;
            color: #000;
        }

        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        .notification-option {
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 5px;
        }

        .notification-option.selected {
            border-color: #000;
            background-color: #f9f9f9;
        }

        .option-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .option-title {
            margin: 0 0 0 10px;
            font-weight: bold;
            color: #000;
        }

        .option-description {
            margin: 0 0 15px 30px;
            color: #666;
            font-size: 14px;
        }

        .option-input {
            margin-left: 30px;
            margin-right: 30px;
        }

        .option-input input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .modal-footer {
            margin-top: 20px;
            text-align: right;
            border-top: 1px solid #eee;
            padding-top: 15px;
        }

        #saveNotificationBtn {
            padding: 8px 20px;
            background-color: #000000;
            color: #ffffff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        #saveNotificationBtn:hover {
            background-color: #333333;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 10% auto;
            }
        }
    </style>
</head>

<body>
    <div id="chat-container" data-event-id="{{eventId}}" data-user-id="{{userId}}">
        <div id="groupInfo" data-group-name="{{groupName}}" data-user-name="{{userName}}">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <span>Event: {{groupName}} | User: {{userName}}</span>
                <div>
                    <a href="/chat/calendar/{{eventId}}/{{userId}}" class="calendar-view-btn">Calendar View</a>
                    <button id="notificationButton">Manage Notifications</button>
                </div>
            </div>
              <div style="display: flex; align-items: center; gap: 15px;">
                    <div class="event-filter">
                        <label for="eventFilter">Filter Events: </label>
                        <select id="eventFilter" class="event-dropdown">
                            <option value="">Select an event</option>
                            <!-- Events will be loaded dynamically -->
                        </select>
                    </div>
                </div>
        </div>
        <div id="messages"></div>
        <div id="input-container">
            <input id="messageInput" placeholder="Type your message..." autocomplete="off" />
            <button id="sendButton">Send</button>
        </div>
    </div>

    <!-- Notification Preferences Modal -->
    <div id="notificationModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Manage Notifications</h3>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <div class="notification-option" id="emailOption">
                    <div class="option-header">
                        <input type="radio" name="notificationPreference" id="emailRadio" value="email">
                        <h4 class="option-title">Get notifications on Email</h4>
                    </div>
                    <p class="option-description">Receive important updates and notifications directly in your inbox</p>
                    <div class="option-input">
                        <input type="email" id="emailInput" placeholder="Enter your email address">
                    </div>
                </div>

                <div class="notification-option" id="smsOption">
                    <div class="option-header">
                        <input type="radio" name="notificationPreference" id="smsRadio" value="sms">
                        <h4 class="option-title">Get notifications on mobile</h4>
                    </div>
                    <p class="option-description">Stay updated with SMS notifications on your phone</p>
                    <div class="option-input">
                        <input type="tel" id="phoneInput" placeholder="Enter your phone number with country code">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="saveNotificationBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.4/socket.io.js"></script>
    <script>
        let initialMessages = {{{ json initialMessages }}}; // Pass the JSON data
    </script>
    <script>
        // This variable will hold the initial messages passed from the server
        document.addEventListener("DOMContentLoaded", () => {
            const socket = io();

            const chatContainer = document.getElementById("chat-container");
            const groupInfo = document.getElementById("groupInfo");
            const messages = document.getElementById("messages");
            const messageInput = document.getElementById("messageInput");
            const sendButton = document.getElementById("sendButton");
            const eventFilter = document.getElementById("eventFilter");

            const eventId = chatContainer.dataset.eventId;
            const userId = chatContainer.dataset.userId;

            const eventName = groupInfo.dataset.groupName;
            const userName = groupInfo.dataset.userName;

            // Set up notification modal
            const notificationButton = document.getElementById("notificationButton");
            const notificationModal = document.getElementById("notificationModal");
            const closeModalBtn = document.querySelector(".close");
            const saveNotificationBtn = document.getElementById("saveNotificationBtn");
            const emailRadio = document.getElementById("emailRadio");
            const smsRadio = document.getElementById("smsRadio");
            const emailOption = document.getElementById("emailOption");
            const smsOption = document.getElementById("smsOption");
            const emailInput = document.getElementById("emailInput");
            const phoneInput = document.getElementById("phoneInput");

            // Open notification modal
            notificationButton.addEventListener("click", () => {
                notificationModal.style.display = "block";
                // Fetch current notification preferences
                fetchNotificationPreferences();
            });

            // Close modal when clicking the X
            closeModalBtn.addEventListener("click", () => {
                notificationModal.style.display = "none";
            });

            // Close modal when clicking outside
            window.addEventListener("click", (event) => {
                if (event.target === notificationModal) {
                    notificationModal.style.display = "none";
                }
            });

            // Handle option selection styling
            emailRadio.addEventListener("change", () => {
                if (emailRadio.checked) {
                    emailOption.classList.add("selected");
                    smsOption.classList.remove("selected");
                }
            });

            smsRadio.addEventListener("change", () => {
                if (smsRadio.checked) {
                    smsOption.classList.add("selected");
                    emailOption.classList.remove("selected");
                }
            });

            // Fetch current notification preferences
            async function fetchNotificationPreferences() {
                try {
                    const response = await fetch(`/user/${userId}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        if (data.success && data.user) {
                            const preferences = data.user;
                            // Set the form values based on preferences
                            if (preferences.preferred_notification === "email") {
                                emailRadio.checked = true;
                                emailOption.classList.add("selected");
                                smsOption.classList.remove("selected");
                                if (preferences.email) {
                                    emailInput.value = preferences.email;
                                }
                            } else if (preferences.preferred_notification === "sms") {
                                smsRadio.checked = true;
                                smsOption.classList.add("selected");
                                emailOption.classList.remove("selected");
                                if (preferences.mobile) {
                                    phoneInput.value = preferences.mobile;
                                }
                            }
                        }
                    } else {
                        console.error("Failed to fetch notification preferences");
                    }
                } catch (error) {
                    console.error("Error fetching notification preferences:", error);
                }
            }

            // Save notification preferences
            saveNotificationBtn.addEventListener("click", async () => {
                const selectedPreference = document.querySelector('input[name="notificationPreference"]:checked');
                
                if (!selectedPreference) {
                    alert("Please select a notification preference");
                    return;
                }
                
                const preferredNotification = selectedPreference.value;
                let contactInfo = "";
                
                if (preferredNotification === "email") {
                    contactInfo = emailInput.value.trim();
                    if (!contactInfo) {
                        alert("Please enter your email address");
                        return;
                    }
                    // Basic email validation
                    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(contactInfo)) {
                        alert("Please enter a valid email address");
                        return;
                    }
                } else if (preferredNotification === "sms") {
                    contactInfo = phoneInput.value.trim();
                    if (!contactInfo) {
                        alert("Please enter your phone number");
                        return;
                    }
                }
                
                try {
                    const response = await fetch(`/user/${userId}/notification-preference`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            preferred_notification: preferredNotification,
                            contact_info: contactInfo
                        })
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            alert("Notification preferences saved successfully");
                            notificationModal.style.display = "none";
                        } else {
                            alert(data.message || "Failed to save notification preferences");
                        }
                    } else {
                        alert("Failed to save notification preferences");
                    }
                } catch (error) {
                    console.error("Error saving notification preferences:", error);
                    alert("An error occurred while saving notification preferences");
                }
            });

            // Existing chat functionality
            const groupInfoContent = document.querySelector('#groupInfo > div > span');
            groupInfoContent.textContent = `Event: ${eventName} | User: ${userName}`;

            socket.emit("joinGroup", eventId, userName, userId);
            // Load initial messages into the chat
            initialMessages = JSON.parse(initialMessages);
            console.log(initialMessages)
            initialMessages.forEach((message) => {
                const messageElement = createMessageElement(message);
                messages.appendChild(messageElement);
            });

            socket.on("message", (data) => {
                const messageElement = createMessageElement(data);
                messages.appendChild(messageElement);
                messages.scrollTop = messages.scrollHeight;
            });

            function formateMessage(message) {
                let m = decodeURIComponent(message);
                return m.replaceAll("\n", "<br />");
            }

            function createMessageElement(data) {
                console.log(data.senderId, userId);
                const messageElement = document.createElement("div");
                messageElement.classList.add("message");
                messageElement.classList.add(
                    data.senderId == userId ? "sender" : "receiver"
                );

                const contentElement = document.createElement("div");
                contentElement.classList.add("message-content");
                contentElement.innerHTML = formateMessage(data.message.content);

                // add username
                const usernameElement = document.createElement("span");
                usernameElement.classList.add("username");
                usernameElement.textContent = data.username;
                contentElement.appendChild(usernameElement);

                const timestampElement = document.createElement("span");
                timestampElement.classList.add("timestamp");
                timestampElement.textContent = new Date(
                    data.created_at
                ).toLocaleString();

                messageElement.appendChild(contentElement);
                messageElement.appendChild(timestampElement);

                if (data.message.attachment && data.message.attachment.length > 0) {
                    const attachmentElement = document.createElement("div");
                    attachmentElement.classList.add("attachment");
                    data.message.attachment.forEach((att) => {
                        const attachmentLink = document.createElement("a");
                        attachmentLink.href = att.url;
                        attachmentLink.textContent = `${att.type} attachment`;
                        attachmentLink.target = "_blank";
                        attachmentElement.appendChild(attachmentLink);
                    });
                    messageElement.appendChild(attachmentElement);
                }

                return messageElement;
            }

            function sendMessage() {
                const content = messageInput.value.trim();
                if (content !== "") {
                    const message = {
                        type: "text",
                        content: content,
                        attachment: [],
                    };
                    socket.emit("sendMessage", { message: message, eventId });
                    messageInput.value = "";
                }
            }

            sendButton.addEventListener("click", sendMessage);
            messageInput.addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    sendMessage();
                }
            });

            socket.on("userJoined", (username) => {
                const joinMessage = document.createElement("div");
                joinMessage.classList.add("system-message");
                joinMessage.textContent = `${username} has joined the chat.`;
                messages.appendChild(joinMessage);
                messages.scrollTop = messages.scrollHeight;
            });

            socket.on("userLeft", (username) => {
                const leftMessage = document.createElement("div");
                leftMessage.classList.add("system-message");
                leftMessage.textContent = `${username} has left the chat.`;
                messages.appendChild(leftMessage);
                messages.scrollTop = messages.scrollHeight;
            });

            // Fetch user's events for the dropdown
            async function fetchUserEvents() {
                try {
                    // Get cookies to find the creatorId
                    const cookies = document.cookie.split(';').reduce((acc, cookie) => {
                        const [key, value] = cookie.trim().split('=');
                        acc[key] = value;
                        return acc;
                    }, {});
                    
                    const creatorId = cookies.creatorId;
                    
                    if (!creatorId) {
                        console.log("Creator ID not found in cookies");
                        return;
                    }
                    
                    const response = await fetch(`/chat/user-events/${creatorId}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        if (data.success && data.events && data.events.length > 0) {
                            populateEventDropdown(data.events);
                        } else {
                            console.log("No events found or invalid response format");
                        }
                    } else {
                        console.error("Failed to fetch user events");
                    }
                } catch (error) {
                    console.error("Error fetching user events:", error);
                }
            }

            // Populate the event dropdown with user's events
            function populateEventDropdown(events) {
                // Clear existing options except the default one
                while (eventFilter.options.length > 1) {
                    eventFilter.remove(1);
                }
                
                // Add user's events to the dropdown
                events.forEach(event => {
                    const option = document.createElement("option");
                    option.value = event.uniqueEventId;
                    option.textContent = event.title;
                    // Set the current event as selected
                    if (event.uniqueEventId === eventId) {
                        option.selected = true;
                    }
                    eventFilter.appendChild(option);
                });
            }

            // Handle event selection change
            eventFilter.addEventListener("change", function() {
                const selectedEventId = this.value;
                if (selectedEventId && selectedEventId !== eventId) {
                    // Redirect to the selected event's chat
                    window.location.href = `/chat/${selectedEventId}/${userId}`;
                }
            });

            // Fetch user's events when the page loads
            fetchUserEvents();
        });
    </script>
</body>

</html>
