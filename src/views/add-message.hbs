<div class="container-sm custom-container min-vh-100 d-flex justify-content-center align-items-center py-5"
    id="add-message">
    <div class="event-form p-4 rounded mb-5" id="eventFormContainer">
        <h3 class="text-center mb-4">ADD MESSAGE</h3>
        <form class="w-100" id="eventForm" enctype="multipart/form-data">
            <div class="row mb-3 align-items-center">
                {{> groupSelect}}
                {{> recipientInput}}
            </div>

            <div class="d-flex gap-2 mb-3">
                <select class="form-select" id="eventSelect" aria-label="Select event">
                    <option value="" selected>Select Event</option>
                    {{#each events}}
                    <option value="{{id}}">{{title}}</option>
                    {{/each}}
                </select>
                {{> timeslotsDropdown}}
            </div>

            <div class="d-none">
                {{> dateSlots defaultHour="00" defaultMinute="00" }}
                {{> weeklySlots defaultHour="00" defaultMinute="00" }}
            </div>

            {{> messageInput}}
            {{> locationInput}}

            <div class="d-flex justify-content-end mt-2">
                <button type="button" class="btn bg-white d-flex align-items-center gap-2 rounded-pill"
                    id="reviewButton">
                    Review Message
                </button>

                <button type="submit" class="btn bg-white d-flex align-items-center gap-2 rounded-pill d-none"
                    id="formSubmitButton">
                    send
                </button>
            </div>
        </form>
    </div>
</div>


{{> userModal}}
{{> loader}}

<div class="container-sm custom-container min-vh-100 d-flex justify-content-center align-items-center py-5 d-none"
    id="review-message">
    <div class="event-form p-4 rounded mb-5" id="eventFormContainer">
        <h4 class="text-center mb-5 review-header">REVIEW YOUR MESSAGE</h4>
        <div class="row justify-content-center" id="reviewMessageContainer">
        </div>
        <div class="d-flex justify-content-between mt-2">
            <button type="button" class="btn bg-white d-flex align-items-center gap-2 rounded-pill" id="editButton">
                <i class="bi bi-pen-fill"></i> Edit
            </button>
            <button type="button" class="btn bg-white d-flex align-items-center gap-2 rounded-pill" id="sendButton">
                <i class="bi bi-send-fill"></i> Send
            </button>
        </div>
    </div>
</div>


<script>
    // Wait for the DOM to be fully loaded before executing the script
    document.addEventListener('DOMContentLoaded', function () {

        const events = JSON.parse("{{json events}}".replace(/&quot;/g, '"'));
        // Global Variables
        let selectedFiles = [];
        let selectedTimeSlot = { timeslot_id: null, recurring_id: null };
        let chatUrl = ""; // Add this line to declare the chatUrl variable

        // Prevent dropdown menus from closing when clicked
        setupDropdownMenus();

        // Set up event listeners and initialize components
        setupRecipientManagement();
        setupFileManagement();
        setupFormSubmission();
        setupGroupSelection();
        setupUserModal();
        hideDefaultTimeSlots();
        initializeEventSelectAction();
        initializeReviewScreenAction();

        // Helper function to set up dropdown menus
        function setupDropdownMenus() {
            document.querySelectorAll(".dropdown-menu").forEach(function (dropdown) {
                dropdown.addEventListener("click", function (e) {
                    e.stopPropagation();
                });
            });
        }

        // Function to create a new recipient row
        function createRecipientRow(name = "", email = "", mobile = "") {
            const row = document.createElement("div");
            row.classList.add("row", "mb-3");

            // Determine if custom input fill class should be added
            let shouldAddInputFormateClass = name || email || mobile;

            // HTML for the new row
            row.innerHTML = `
                <div class="col-md-3 d-flex justify-content-center align-items-center">
                    <input type="text" name="name" required 
                        class="form-control recipients_input_box ${shouldAddInputFormateClass ? 'custom_input_fill_class' : ''}" 
                        placeholder="Name" value="${name}" />
                </div>
                <div class="col-md-4 gap-1 d-flex justify-content-center align-items-center">
                    <input type="checkbox" name="email_check" />
                    <input type="email" name="email" required 
                        class="form-control recipients_input_box ${shouldAddInputFormateClass ? 'custom_input_fill_class' : ''}" 
                        placeholder="Email" value="${email}" />
                </div>
                <div class="col-md-4 gap-1 d-flex justify-content-center align-items-center">
                    <input type="checkbox" name="mobile_check" />
                    <div class="input-group">
                        <input type="text" name="mobile" 
                            class="form-control recipients_input_box ${shouldAddInputFormateClass ? 'custom_input_fill_class' : ''}" 
                            placeholder="Mobile with country code" value="${mobile}" />
                    </div>
                </div>
                <div class="col-md-1 d-flex justify-content-center align-items-center">
                    <button class="btn btn-sm addButton" type="button">
                        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9 0C4.03754 0 0 4.03754 0 9C0 13.9625 4.03754 18 9 18C13.9625 18 18 13.9625 18 9C18 4.03754 13.9625 0 9 0ZM9 1.38462C13.2141 1.38462 16.6154 4.78592 16.6154 9C16.6154 13.2141 13.2141 16.6154 9 16.6154C4.78592 16.6154 1.38462 13.2141 1.38462 9C1.38462 4.78592 4.78592 1.38462 9 1.38462ZM8.30769 4.84615V8.30769H4.84615V9.69231H8.30769V13.1538H9.69231V9.69231H13.1538V8.30769H9.69231V4.84615H8.30769Z" fill="#AAAAAA" />
                        </svg>
                    </button>
                    <button class="btn btn-sm deleteButton" type="button">
                        <i class="bi bi-trash-fill text-white"></i>
                    </button>
                </div>
            `;

            // Append row to recipients list
            recipientsList.appendChild(row);

            // Add event listeners for buttons in the new row
            setupRowButtons(row);

            // Update all rows of recipients
            updateRowOfRecipients();
        }

        // Function to set up buttons in a recipient row
        function setupRowButtons(row) {
            const deleteButton = row.querySelector(".deleteButton");
            const addButton = row.querySelector(".addButton");

            deleteButton.addEventListener("click", function () {
                row.remove();
                updateRowOfRecipients();
            });

            addButton.addEventListener('click', function () {
                this.remove();
                let inputs = row.querySelectorAll('.recipients_input_box');
                inputs.forEach((input) => {
                    if (input.value !== "") {
                        input.classList.add('custom_input_fill_class');
                    }
                });
                createRecipientRow();
            });
        }

        // Function to update all rows of recipients
        function updateRowOfRecipients() {
            const nodes = recipientsList.querySelectorAll('.row');
            let index = 0;
            let lengthOfTotalRows = nodes.length;

            for (let node of nodes) {
                if (index === lengthOfTotalRows - 1) {
                    break;
                }
                if (node.querySelector('.addButton')) {
                    node.querySelector('.addButton').remove();
                }
                index++;
            }
        }

        const userTableBody = document.getElementById("userTableBody");

        function createUserTableRow(user) {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td><input type="checkbox" class="user-checkbox" data-email="${user.email ?? ""}" data-name="${user.name ?? ""}" data-mobile="${user.mobile ?? ""}"></td>
                <td>${user.name ?? "-"}</td>
                <td>${user.email ?? "-"}</td>
                <td>${user.mobile ?? "-"}</td>
            `;
            return row;
        }

        function populateUserTable(users) {
            userTableBody.innerHTML = "";
            document.getElementById("recipientsList").innerHTML = "";
            users.forEach((user) => {
                const row = createUserTableRow(user);
                userTableBody.appendChild(row);
                createRecipientRow(user.name, user.email ?? "", user.mobile);
            });
        }

        async function fetchUsers(id) {
            if (id === "new" || id === "new_option" || !id) {
                return;
            }

            loader.classList.remove("d-none");

            try {
                const response = await fetch(`/event/fetch-contact-group-members/${id}`, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });
                const data = await response.json();
                populateUserTable(data.data);
            } catch (error) {
                console.error("Error fetching users:", error);
            } finally {
                loader.classList.add("d-none");
            }
        }

        // Function to set up recipient management
        function setupRecipientManagement() {
            const addMoreButton = document.getElementById("addMoreButton");
            const recipientsList = document.getElementById("recipientsList");

            addMoreButton.addEventListener("click", function () {
                createRecipientRow();
            });
        }

        // Function to set up file management
        function setupFileManagement() {
            const fileInput = document.getElementById('messageFileInput');
            const filesPreview = document.getElementById('files-preview');

            fileInput.addEventListener('change', handleFileSelect);

            function handleFileSelect(event) {
                const newFiles = Array.from(event.target.files);
                selectedFiles = [...selectedFiles, ...newFiles];
                updateFilesPreview();
            }

            function updateFilesPreview() {
                filesPreview.innerHTML = '';
                selectedFiles.forEach((file, index) => {
                    const filePreview = createFilePreview(file, index);
                    filesPreview.appendChild(filePreview);
                });
            }

            function createFilePreview(file, index, showDeleteButton = true) {
                const previewContainer = document.createElement('div');
                previewContainer.className = 'file-preview d-flex align-items-center mb-2';

                const fileIcon = document.createElement('i');
                fileIcon.className = getFileIconClass(file.type);
                fileIcon.style.fontSize = '24px';
                fileIcon.style.marginRight = '10px';

                const fileName = document.createElement('span');
                fileName.textContent = file.name;
                fileName.className = 'flex-grow-1';

                previewContainer.appendChild(fileIcon);
                previewContainer.appendChild(fileName);
                
                if (showDeleteButton) {
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.className = 'btn btn-sm btn-danger';
                    deleteButton.onclick = () => deleteFile(index);
                    previewContainer.appendChild(deleteButton);
                }

                return previewContainer;
            }

            function getFileIconClass(fileType) {
                if (fileType.startsWith('image/')) return 'bi bi-file-image';
                if (fileType.startsWith('video/')) return 'bi bi-file-play';
                if (fileType.startsWith('audio/')) return 'bi bi-file-music';
                if (fileType === 'application/pdf') return 'bi bi-file-pdf';
                return 'bi bi-file-earmark';
            }

            function deleteFile(index) {
                selectedFiles.splice(index, 1);
                updateFilesPreview();
            }
        }

        function formatDateWithFlatpickr(dateString, format, expectedFormat) {

            if (!dateString || !format || !expectedFormat) {
                return null;
            }
            // Parse the date string using Flatpickr's parseDate function
            const dateObj = flatpickr.parseDate(dateString, format);

            // Format the date object to yyyy-mm-dd
            const formattedDate = flatpickr.formatDate(dateObj, expectedFormat);

            return formattedDate;
        }

        function changeTo24Hours(time) {
            if (!time) {
                return null;
            }
            let hourAndMinutes = time.split(" ");
            let amPm = hourAndMinutes[1];
            let [hour, minute] = hourAndMinutes[0].split(":");

            let hour24 = parseInt(hour, 10);
            if (amPm === 'PM' && hour24 !== 12) {
                hour24 += 12;
            } else if (amPm === 'AM' && hour24 === 12) {
                hour24 = 0;
            }
            return `${hour24.toString().padStart(2, '0')}:${minute}`;
        }


        // Function to set up form submission
        function setupFormSubmission() {
            const eventForm = document.getElementById("eventForm");
            const loader = document.getElementById("loader");

            eventForm.addEventListener("submit", async function (e) {
                e.preventDefault();
                loader.classList.remove("d-none");

                const formData = new FormData(e.target);
                const groupId = getGroupId();
                const timeSlots = collectTimeSlots();
                const weeklySlots = collectWeeklySlots();
                const recipients = collectRecipients();
                const address = window.selectedAddress || {};

                formData.append("timeSlots", JSON.stringify([...timeSlots, ...weeklySlots]));
                formData.append("members", JSON.stringify(recipients));
                formData.append("contact_group_id", groupId);
                formData.append("selectedTimeSlot", JSON.stringify(selectedTimeSlot));

                // Append address data
                Object.keys(address).forEach((key) => {
                    formData.append(key, address[key]);
                });

                formData.delete('files');
                // Append selected files
                selectedFiles.forEach((file, index) => {
                    formData.append(`files`, file);
                });

                // Remove unnecessary form data
                ['startDate', 'endDate', 'startTime', 'endTime', 'slot_name', 'weekdays', "name", "email", "mobile", "email_check", "mobile_check"].forEach(key => formData.delete(key));

                console.log(Object.fromEntries(formData.entries()));

                let eventId = document.getElementById("eventSelect").value;

                try {
                    const response = await fetch(`/event/add-message/${eventId}`, {
                        method: 'POST',
                        body: formData,
                    });

                    if (response.ok) {
                        await response.json();
                        window.location.reload();
                    } else {
                        console.error('Error:', response.status);
                    }
                } catch (error) {
                    console.error('Error:', error);
                } finally {
                    loader.classList.add("d-none");
                }
            });

            // Helper functions for form submission
            function getGroupId() {
                const groupSelect = document.getElementById("groupSelect");
                return groupSelect.value === "new" || groupSelect.value === "new_option" ? document.getElementById("newGroupInput").value : groupSelect.value;
            }

            function collectTimeSlots() {
                return collectSlots('#time-slot-container .row', 1);
            }

            function collectWeeklySlots() {
                return collectSlots('#weekly-slot-container .row', 2);
            }

            function collectSlots(selector, type) {
                return Array.from(document.querySelectorAll(selector)).map(row => ({
                    type,
                    startDate: formatDateWithFlatpickr(row.querySelector('[name="startDate"]').value, 'm-d-y', 'Y-m-d'),
                    endDate: formatDateWithFlatpickr(row.querySelector('[name="endDate"]').value, 'm-d-y', 'Y-m-d'),
                    startTime: changeTo24Hours(row.querySelector(`[name="startTime"]`).value),
                    endTime: changeTo24Hours(row.querySelector(`[name="endTime"]`).value),
                    slotName: row.querySelector('[name="slot_name"]').value,
                    ...(type === 2 && { weekdays: Array.from(row.querySelectorAll('.week-days-input:checked')).map(cb => cb.value) })
                }));
            }

            function collectRecipients() {
                return Array.from(document.getElementById("recipientsList").children).map(recipient => ({
                    name: recipient.querySelector("input[name='name']").value,
                    email: recipient.querySelector("input[name='email']").value,
                    mobile: recipient.querySelector("input[name='mobile']").value,
                    isEmailChecked: recipient.querySelector("input[type=checkbox][name=email_check]")?.checked || false,
                    isMobileChecked: recipient.querySelector("input[type=checkbox][name=mobile_check]")?.checked || false,
                }));
            }

            function parseLocationData(data) {
                const [room_floor, place_name, address_line1, address_line2, city, state, country, postal_code] = data.split(',').map(part => part.trim());
                return { room_floor, place_name, address_line1, address_line2, city, state, country, postal_code };
            }

        }

        // Function to set up group selection
        function setupGroupSelection() {
            const groupSelect = document.getElementById('groupSelect');
            const newGroupInput = document.getElementById('newGroupInput');
            const addNewGroupBtn = document.getElementById('addNewGroupBtn');

            groupSelect.addEventListener('change', function () {
                if (this.value === 'new') {
                    this.classList.add('d-none');
                    newGroupInput.classList.remove('d-none');
                    addNewGroupBtn.classList.remove('d-none');
                }
                fetchUsers(this.value);
            });

            addNewGroupBtn.addEventListener('click', function () {
                const newGroupName = newGroupInput.value.trim();
                if (newGroupName) {
                    addNewGroup(newGroupName);
                }
            });

            function addNewGroup(newGroupName) {
                const newOption = groupSelect.querySelector('option[value="new_option"]');
                if (newOption) {
                    groupSelect.removeChild(newOption);
                }

                const newGroupOption = new Option(newGroupName, 'new_option', true, true);
                groupSelect.add(newGroupOption, 1);
                groupSelect.value = newGroupOption.value;

                newGroupInput.classList.add('d-none');
                addNewGroupBtn.classList.add('d-none');
                groupSelect.classList.remove('d-none');

                newGroupInput.value = '';
            }
        }

        // Function to set up user modal
        function setupUserModal() {
            const openModalButton = document.getElementById("openModalButton");
            const userTableBody = document.getElementById("userTableBody");
            const loader = document.getElementById("modal-loader");
            const searchBox = document.getElementById("searchBox");
            const addButton = document.getElementById("addButton");


            openModalButton.addEventListener("click", () => {
                const groupId = document.getElementById("groupSelect").value;
                if (groupId && groupId !== 'new' && groupId !== 'new_option') {
                    const userModal = new bootstrap.Modal(document.getElementById('userModal'));
                    userModal.show();
                } else {
                    alert(groupId ? "Newly created group doesn't have any members" : "Please select a group");
                }
            });

            searchBox.addEventListener("input", () => {
                const query = searchBox.value.toLowerCase();
                userTableBody.querySelectorAll("tr").forEach((row) => {
                    const name = row.querySelector("td:nth-child(2)").textContent.toLowerCase();
                    const email = row.querySelector("td:nth-child(3)").textContent.toLowerCase();
                    const mobile = row.querySelector("td:nth-child(4)").textContent.toLowerCase();
                    row.style.display = (name.includes(query) || email.includes(query) || mobile.includes(query)) ? "" : "none";
                });
            });

            addButton.addEventListener("click", () => {
                const selectedUsers = Array.from(document.querySelectorAll(".user-checkbox:checked")).map((checkbox) => ({
                    name: checkbox.getAttribute("data-name"),
                    email: checkbox.getAttribute("data-email"),
                    mobile: checkbox.getAttribute("data-mobile"),
                }));

                selectedUsers.forEach((user) => {
                    createRecipientRow(user.name, user.email, user.mobile);
                });

                document.querySelectorAll(".user-checkbox").forEach((checkbox) => {
                    checkbox.checked = false;
                });

                const modal = bootstrap.Modal.getInstance(document.getElementById("userModal"));
                modal.hide();
            });


        }

        function initializeEventSelectAction() {

            function initializeContainer(containerId) {
                const container = document.getElementById(containerId);
                if(container) {
                    const rows = container.querySelectorAll('.row');

                    rows.forEach((row, index) => {
                        if (!row.querySelector('.button-col')) {
                            const buttonCol = document.createElement('div');
                            buttonCol.className = 'col-md-1 button-col';
                            row.appendChild(buttonCol);
                        }
                        updateCheckboxIds(row);
                    });

                    updateButtons(container);
                }
            }

            function updateButtons(container) {
                const rows = container.querySelectorAll('.row');
                rows.forEach((row, index) => {
                    const buttonCol = row.querySelector('.button-col');
                    buttonCol.innerHTML = '';

                    if (rows.length == 1) {
                        const addButton = createButton('<img src="/assets/images/plus.png" alt="plus" width="24" height="24" />', "no_style_btn", () => addRow(container));
                        buttonCol.appendChild(addButton);
                    }

                    if (rows.length > 1 && index == rows.length - 1) {
                        const addButton = createButton('<img src="/assets/images/plus.png" alt="plus" width="24" height="24" />', "no_style_btn", () => addRow(container));
                        buttonCol.appendChild(addButton);
                    }

                    if (rows.length > 1) {
                        const deleteButton = createButton('<i class="bi bi-trash-fill text-white"></i>', 'no_style_btn', () => deleteRow(row, container));
                        buttonCol.appendChild(deleteButton);
                    }
                });
            }

            function createButton(icon, className, clickHandler) {
                const button = document.createElement('button');
                button.className = `${className}`;
                button.innerHTML = `${icon}`;
                button.onclick = clickHandler;
                return button;
            }

            function addRow(container) {
                const rows = container.querySelectorAll('.row');
                const newRow = rows[0].cloneNode(true);

                newRow.querySelectorAll('input').forEach(input => {
                    if (input.name !== 'weekdays') {
                        input.value = '';
                    }
                    if (input.type === 'checkbox') {
                        input.checked = false;
                    }
                });

                // Generate unique IDs for date inputs
                const newStartDateId = generateUniqueId('startDate');
                const newEndDateId = generateUniqueId('endDate');
                const newStartTimeId = generateUniqueId('startTime');
                const newEndTimeId = generateUniqueId('endTime');
                newRow.querySelector('input[name="startDate"]').id = newStartDateId;
                newRow.querySelector('input[name="endDate"]').id = newEndDateId;
                newRow.querySelector('input[name="startTime"]').id = newStartTimeId;
                newRow.querySelector('input[name="endTime"]').id = newEndTimeId;

                updateCheckboxIds(newRow);
                const buttonCol = newRow.querySelector('.button-col');
                buttonCol.innerHTML = '';

                container.appendChild(newRow);

                [newStartDateId, newEndDateId].forEach(id => {
                    // Update Flatpickr initialization for the new inputs
                    flatpickr(`#${id}`, {
                        dateFormat: "m-d-y",
                        allowInput: true,
                    });
                });

                [newStartTimeId, newEndTimeId].forEach(id => {
                    flatpickr(`#${id}`, {
                        enableTime: true,
                        noCalendar: true,
                        dateFormat: "h:i K", // h:i for hour:min, K for AM/PM
                        time_24hr: false, // Use 12-hour format
                        minuteIncrement: 1,
                    });
                });


                updateButtons(container);

            }

            function deleteRow(row, container) {
                row.remove();
                updateButtons(container);
            }

            function updateCheckboxIds(row) {
                const checkboxes = row.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(checkbox => {
                    const newId = generateUniqueId('checkbox');
                    const label = row.querySelector(`label[for="${checkbox.id}"]`);
                    checkbox.id = newId;
                    if (label) {
                        label.setAttribute('for', newId);
                    }
                });
            }

            function generateUniqueId(prefix) {
                return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            }


            async function handleEventSelect() {
                const eventId = this.value;
                if (eventId) {
                    await fetchEvent(eventId);
                }
            }

            function convertDates(inputData) {
                // Parse the input date strings to Date objects
                const startDateObj = inputData.startDate ? new Date(inputData.startDate) : null;
                const endDateObj = inputData.endDate ? new Date(inputData.endDate) : null;

                // Extract dates in the desired format (YYYY-MM-DD)
                const startDate = startDateObj ? startDateObj.toISOString().split('T')[0] : null;
                const endDate = endDateObj ? endDateObj.toISOString().split('T')[0] : null;

                // Parse time strings and format them to AM/PM format
                const parseTime = (timeStr) => {
                    const [hours, minutes] = timeStr.split(':');
                    let hour = parseInt(hours);
                    const isPM = hour >= 12;
                    hour = hour % 12 || 12; // Convert 0 to 12 for midnight and 12-hour format
                    const period = isPM ? 'PM' : 'AM';
                    return `${hour}:${minutes} ${period}`;
                };

                const startTime = inputData.startTime ? parseTime(inputData.startTime) : null;
                const endTime = inputData.endTime ? parseTime(inputData.endTime) : null;

                // Create output object
                return {
                    startDate: startDate,
                    endDate: endDate,
                    startTime: startTime,
                    endTime: endTime,
                };
            }

            function updateIdsOfTimeSlots(newRow, container) {

                const newStartDateId = generateUniqueId("startDate");
                const newEndDateId = generateUniqueId("endDate");
                const newStartTimeId = generateUniqueId("startTime");
                const newEndTimeId = generateUniqueId("endTime");
                newRow.querySelector('input[name="startDate"]').id = newStartDateId;
                newRow.querySelector('input[name="endDate"]').id = newEndDateId;
                newRow.querySelector('input[name="startTime"]').id = newStartTimeId;
                newRow.querySelector('input[name="endTime"]').id = newEndTimeId;


                updateCheckboxIds(newRow);
                const buttonCol = newRow.querySelector(".button-col");
                buttonCol.innerHTML = "";

                container.appendChild(newRow);

                [newStartDateId, newEndDateId].forEach((id) => {
                    // Update Flatpickr initialization for the new inputs
                    flatpickr(`#${id}`, {
                        dateFormat: "m-d-y",
                        allowInput: true,
                    });
                });

                [newStartTimeId, newEndTimeId].forEach((id) => {
                    flatpickr(`#${id}`, {
                        enableTime: true,
                        noCalendar: true,
                        dateFormat: "h:i K", // h:i for hour:min, K for AM/PM
                        time_24hr: false, // Use 12-hour format
                        minuteIncrement: 1,
                    });
                });

                updateButtons(container);
            }

            function generateSlotsHTML(data) {
                const timeSlotsContainer = document.getElementById("time-slot-container");
                const weeklySlotContainer = document.getElementById("weekly-slot-container");

                timeSlotsContainer.style.display = "block";
                weeklySlotContainer.style.display = "block";


                let dateSlotAppended = false;
                let weeklySlotAppended = false;
                const timeSlotsContainerRow = timeSlotsContainer.querySelectorAll(".row");
                const weeklySlotsContainerRow = weeklySlotContainer.querySelectorAll(".row");

                let firstRow = timeSlotsContainerRow[0];
                let firstRowOfWeekly = weeklySlotsContainerRow[0];

                firstRow.querySelectorAll('input').forEach(input => {
                    if (input.name !== 'weekdays') {
                        input.value = '';
                    }
                    if (input.type === 'checkbox') {
                        input.checked = false;
                    }
                });

                firstRowOfWeekly.querySelectorAll('input').forEach(input => {
                    if (input.name !== 'weekdays') {
                        input.value = '';
                    }
                    if (input.type === 'checkbox') {
                        input.checked = false;
                    }
                });

                // remove all rows except the first row
                for (let i = 1; i < timeSlotsContainerRow.length; i++) {
                    timeSlotsContainerRow[i].remove();
                }

                for (let i = 1; i < weeklySlotsContainerRow.length; i++) {
                    weeklySlotsContainerRow[i].remove();
                }

                for (const slot of data) {

                    if (slot.type == 1) {
                        if (!dateSlotAppended) {
                            let firstRow = timeSlotsContainerRow[0];

                            const { startDate, endDate, startTime, endTime } = convertDates({
                                startDate: slot.startDate,
                                endDate: slot.endDate,
                                startTime: slot.startTime,
                                endTime: slot.endTime
                            })

                            const startDateInput = firstRow.querySelector('input[name="startDate"]');
                            startDateInput.value = formatDateWithFlatpickr(startDate, 'Y-m-d', 'm-d-y');
                                if (startDateInput?.value?.trim() !== "") {
                                    startDateInput.classList.add("filled");
                                } else {
                                    startDateInput?.classList?.remove("filled");
                                }
                            firstRow.querySelector('input[name="endDate"]').value = formatDateWithFlatpickr(endDate, 'Y-m-d', 'm-d-y');
                            firstRow.querySelector('input[name="startTime"]').value = startTime;
                            firstRow.querySelector('input[name="endTime"]').value = endTime;
                            firstRow.querySelector('input[name="slot_name"]').value = slot.slot_name;
                            dateSlotAppended = true;

                        }
                        else {
                            let newRow = timeSlotsContainerRow[0].cloneNode(true);


                            newRow.querySelector('input[name="startDate"]').value = formatDateWithFlatpickr(slot.startDate, 'Y-m-d', 'm-d-y');
                            newRow.querySelector('input[name="endDate"]').value = formatDateWithFlatpickr(slot.endDate, 'Y-m-d', 'm-d-y');
                            newRow.querySelector('input[name="startTime"]').value = slot.startTime;
                            newRow.querySelector('input[name="endTime"]').value = slot.endTime;
                            newRow.querySelector('input[name="slot_name"]').value = slot.slot_name;

                            updateIdsOfTimeSlots(newRow, timeSlotsContainer);
                        }
                    } else {

                        if (!weeklySlotAppended) {

                            let firstRow = weeklySlotsContainerRow[0];

                            const { startDate, endDate, startTime, endTime } = convertDates({
                                startDate: slot.startDate,
                                endDate: slot.endDate,
                                startTime: slot.startTime,
                                endTime: slot.endTime
                            })

                            firstRow.querySelector('input[name="startDate"]').value = formatDateWithFlatpickr(startDate, 'Y-m-d', 'm-d-y');
                            firstRow.querySelector('input[name="endDate"]').value = formatDateWithFlatpickr(endDate, 'Y-m-d', 'm-d-y');
                            firstRow.querySelector('input[name="startTime"]').value = startTime;
                            firstRow.querySelector('input[name="endTime"]').value = endTime;
                            firstRow.querySelector('input[name="slot_name"]').value = slot.slot_name;

                            let weekdays = firstRow.querySelectorAll('.week-days-input');
                            for (let i = 0; i < weekdays.length; i++) {
                                weekdays[i].checked = slot.weekdays.includes(weekdays[i].value);
                            }

                            weeklySlotAppended = true;
                        } else {

                            let newRow = weeklySlotsContainerRow[0].cloneNode(true);
                            newRow.querySelector('input[name="startDate"]').value = formatDateWithFlatpickr(slot.startDate, 'Y-m-d', 'm-d-y');
                            newRow.querySelector('input[name="endDate"]').value = formatDateWithFlatpickr(slot.endDate, 'Y-m-d', 'm-d-y');
                            newRow.querySelector('input[name="startTime"]').value = slot.startTime;
                            newRow.querySelector('input[name="endTime"]').value = slot.endTime;
                            newRow.querySelector('input[name="slot_name"]').value = slot.slot_name;
                            let weekdays = newRow.querySelectorAll('.week-days-input');
                            for (let i = 0; i < weekdays.length; i++) {
                                weekdays[i].checked = slot.weekdays.includes(weekdays[i].value);
                            }

                            updateIdsOfTimeSlots(newRow, weeklySlotContainer);
                        }

                    }

                }

            }

            async function fetchEvent(eventId) {
                try {
                    const response = await fetch(`/event/${eventId}`, {
                        method: "GET",
                        headers: { "Content-Type": "application/json" },
                    });
                    const data = await response.json();
                    if (data) {
                        chatUrl = data.data.chatUrl;
                        generateSlotsHTML(data.data.result);
                        updateGroupAndAddress(data.data.result[0]);
                        fetchAndRenderTimeslots(data?.data?.result || []);
                    }
                } catch (error) {
                    console.error("Error fetching event:", error);
                }
            }

            function updateGroupAndAddress(eventData) {
                if (eventData.calendar_id) {
                    groupSelect.value = eventData.calendar_id;
                    fetchUsers(eventData.calendar_id);
                }
                if (eventData.address) {
                    const { room, place, address_line1, address_line2, city, state, country, postal_code } = eventData.address;
                    const fullAddress = [room, place, address_line1, address_line2, city, state, country, postal_code]
                    .filter(Boolean)
                    .join(", ");

                    const locationInput = document.getElementById("location");
                    window.selectedAddress = eventData.address;

                    if (fullAddress.trim() !== "") {
                        locationInput.value = fullAddress;
                        locationInput?.classList?.add("filled");
                    } else {
                        locationInput?.classList?.remove("filled");
                    }
                }
            }

            document
                .getElementById("eventSelect")
                .addEventListener("change", handleEventSelect);

            function initializeContainer(containerId) {
                const container = document.getElementById(containerId);
                const rows = container.querySelectorAll(".row");

                // Ensure there's a column for buttons in each row
                rows.forEach((row, index) => {
                    if (!row.querySelector(".button-col")) {
                        const buttonCol = document.createElement("div");
                        buttonCol.className = "col-md-1 button-col";
                        row.appendChild(buttonCol);
                    }
                    // Update checkbox IDs for existing rows
                    updateCheckboxIds(row);
                });

                updateButtons(container);
            }
            initializeContainer("time-slot-container");
            initializeContainer("weekly-slot-container");
        }

        function hideDefaultTimeSlots() {
            const timeSlotsContainer = document.getElementById("time-slot-container");
            if (timeSlotsContainer) {
                timeSlotsContainer.style.display = "none";
            }

            const weeklySlotsContainer = document.getElementById("weekly-slot-container");
            if (weeklySlotsContainer) {
                weeklySlotsContainer.style.display = "none";
            }
        }

        function initializeReviewScreenAction() {

            function formatDateToLocalDateString(dateString) {
                const options = { month: "numeric", day: "numeric", year: "2-digit" };
                return new Date(dateString).toLocaleDateString("en-US", options);
            }

            // Function to format time
            function formatTime(timeString) {
                if(!timeString) return "-";
                return new Date(`2000-01-01T${timeString}`).toLocaleTimeString("en-US", {
                    hour: "numeric",
                    minute: "numeric",
                    hour12: true,
                });
            }

            // Function to get day of week
            function getDayOfWeek(dateString) {
                if(!dateString) return "-";

                return new Date(dateString)
                    .toLocaleDateString("en-US", { weekday: "long" })
                    .toUpperCase();
            }

            // Function to generate HTML for a single time slot
            function generateTimeSlotHTML(slot) {
                if (slot.type === 1) {
                    return `
                        <table style="background-color: black; color: white; border-collapse: collapse;">
                            <th>
                                <tr colspan="4">
                                    <td  style="padding: 5px;">${slot.slotName}</td>
                                </tr>
                            </th>
                            <tr>
                                <td style="padding: 5px;">
                                    <span class="day-badge badge w-100">${getDayOfWeek(slot.startDate)}</span>
                                </td>
                                <td style="padding: 5px;">FROM</td>
                                <td style="padding: 5px;">
                                     <span class="day-badge badge w-100">
                                        ${formatTime(slot.startTime)}
                                    </span>
                                </td>
                                <td style="padding: 5px;">
                                     <span class="day-badge badge w-100">
                                        ${formatTime(slot.endTime)}
                                    </span>
                                </td>
                            </tr>
                            <tr>
                                <td style="padding: 5px;">
                                    <span class="day-badge badge w-100">${getDayOfWeek(slot.startDate)}</span>
                                </td>
                                <td style="padding: 5px;">Starts</td>
                                <td style="padding: 5px;" >
                                    <span class="day-badge badge w-100">
                                        ${formatDateToLocalDateString(slot.startDate)}
                                    </span>
                                </td>
                                <td style="padding: 5px;">
                                     <span class="day-badge badge w-100">
                                        ${formatDateToLocalDateString(slot.endDate)}
                                    </span>
                                </td>
                            </tr>
                        </table>
                `;
                } else {
                    return `
                    <table style="background-color: black; color: white; border-collapse: collapse;">
                         <th>
                            <tr colspan="4">
                                <td  style="padding: 5px;">${slot.slotName}</td>
                            </tr>
                        </th>
                        <tr>
                            <td style="padding: 5px;" >
                                <span class="day-badge badge w-100">
                                    ${formatDateToLocalDateString(slot.startDate)}
                                </span>
                                </td>
                            <td style="padding: 5px;">TO</td>
                            <td style="padding: 5px;">
                                <span class="day-badge badge w-100">
                                    ${formatDateToLocalDateString(slot.endDate)}
                                </span>
                            </td>
                            <td></td>
                        </tr>
                        <tr>
                            <td style="padding: 5px;">
                                     <span class="day-badge badge w-100">
                                        ${formatTime(slot.startTime)}
                                    </span>
                            </td>
                            <td style="padding: 5px;">TO</td>
                            <td style="padding: 5px;">
                                    <span class="day-badge badge w-100">
                                    ${formatTime(slot.endTime)}
                                </span>
                            </td>
                            <td></td>
                        </tr>
                    </table>
                
                `;
                }
            }

            // Function to generate HTML for all time slots
            function generateAllTimeSlotsHTML(slots) {
                return slots.map(generateTimeSlotHTML).join("");
            }


            document.getElementById("sendButton").addEventListener("click", function () {
                document.getElementById("formSubmitButton").click();
            });

            document.getElementById("editButton").addEventListener("click", function () {
                document.getElementById("review-message").classList.add("d-none");
                document.getElementById("add-message").classList.remove("d-none");
            });


            function handleReviewScreen() {
                document.getElementById("review-message").classList.remove("d-none");
                document.getElementById("add-message").classList.add("d-none");

                let reviewMessageContainer = document.getElementById(
                    "reviewMessageContainer"
                );
                reviewMessageContainer.innerHTML = "";

                let col = document.createElement("div");
                col.classList.add("col-md-12");

                let message = document.createElement("div");
                message.classList.add("message");
                message.innerHTML = `<p class="message-text">${document.getElementById("message").value
                    }</p>`;

                // selected Files preview
                let preview = document.createElement("div");
                preview.classList.add("preview");

                preview.innerHTML = "";
                selectedFiles.forEach((file, index) => {
                    const filePreview = createFilePreview(file, index, false);
                    preview.appendChild(filePreview);
                });

                message.appendChild(preview);
                col.appendChild(message);

                let eventDetails = document.createElement("div");
                eventDetails.classList.add("event-details", "mb-4");

                eventDetails.innerHTML = `
            <h6 class="font-weight-bold">${document.getElementById("eventSelect").selectedOptions[0].text
                    }</h6>
            `;

                eventDetails.innerHTML += `
                <a href="${chatUrl}" target="_blank" class="text-decoration-none">Chat URL</a>
            `;

                let timeSlotsContainer = document.createElement("div");
                timeSlotsContainer.classList.add("time-slots", "mb-4");

                function collectSlots(selector, type) {
                    return Array.from(document.querySelectorAll(selector)).map(row => ({
                        type,
                        startDate: formatDateWithFlatpickr(row.querySelector('[name="startDate"]').value, 'm-d-y', 'Y-m-d'),
                        endDate: formatDateWithFlatpickr(row.querySelector('[name="endDate"]').value, 'm-d-y', 'Y-m-d'),
                        startTime: changeTo24Hours(row.querySelector(`[name="startTime"]`).value),
                        endTime: changeTo24Hours(row.querySelector(`[name="endTime"]`).value),
                        slotName: row.querySelector('[name="slot_name"]').value,
                        ...(type === 2 && { weekdays: Array.from(row.querySelectorAll('.week-days-input:checked')).map(cb => cb.value) })
                    }));
                }

                function collectTimeSlots() {
                    return collectSlots('#time-slot-container .row', 1);
                }

                function collectWeeklySlots() {
                    return collectSlots('#weekly-slot-container .row', 2);
                }


                // Collect time slots
                const timeSlots = collectTimeSlots();
                // Collect weekly slots
                const weeklySlots = collectWeeklySlots();

                const timeSlotsHTML = generateAllTimeSlotsHTML(timeSlots);
                const weeklySlotsHTML = generateAllTimeSlotsHTML(weeklySlots);

                // Insert the generated HTML into the DOM
                timeSlotsContainer.innerHTML = timeSlotsHTML;
                timeSlotsContainer.innerHTML += weeklySlotsHTML;

                const recipients = [];
                const recipientsList = document.getElementById("recipientsList");

                for (let i = 0; i < recipientsList.children.length; i++) {
                    const recipient = recipientsList.children[i];
                    const name = recipient.querySelector("input[name='name']").value;
                    const email = recipient.querySelector("input[name='email']").value;
                    const mobile = recipient.querySelector("input[name='mobile']").value;
                    recipients.push({ name, email, mobile });
                }

                let recipientsDIV = document.createElement("div");
                recipientsDIV.classList.add("d-flex", "flex-wrap", "gap-2", "mb-4");



                recipients.forEach((recipient) => {
                    let recipientDIV = document.createElement("div");


                    recipientDIV.classList.add("d-flex", "align-items-center", "gap-2", "tag", "badge", "rounded-pill", "recipient-box");
                    recipientDIV.dataset.rowId = recipient.mobile;

                    let pTag = document.createElement('p');
                    pTag.innerHTML = recipient.name;
                    pTag.classList.add("m-0");
                    let button = document.createElement('button');

                    button.innerHTML = '<img src="/assets/images/close.png" width="24" height="24" alt="close" />';
                    button.onclick = function () {
                        let rowId = this.parentElement.dataset.rowId;

                        const recipientList = document.getElementById("recipientsList");

                        for (let i = 0; i < recipientList.children.length; i++) {
                            const recipient = recipientList.children[i];
                            const mobile = recipient.querySelector("input[name='mobile']").value;

                            if (mobile === rowId) {
                                recipientList.children[i].remove();
                                break;
                            }
                        }

                        this.parentElement.remove();
                    };
                    recipientDIV.appendChild(pTag);
                    recipientDIV.appendChild(button);

                    recipientsDIV.appendChild(recipientDIV);
                });

                reviewMessageContainer.appendChild(col);
                reviewMessageContainer.appendChild(eventDetails);
                reviewMessageContainer.appendChild(timeSlotsContainer);
                reviewMessageContainer.appendChild(recipientsDIV);
            }

            document
                .getElementById("reviewButton")
                .addEventListener("click", handleReviewScreen);

        }

        function handleSelectTimeslot(event) {
            const value = event?.target?.value;
            
            if (value && value !== "all") {
                if (value.includes("-")) {
                    const [timeslotId] = value.split("-");
                    selectedTimeSlot = { timeslot_id: timeslotId, recurring_id: value };
                } else {
                    selectedTimeSlot = { timeslot_id: value, recurring_id: null };
                }
            }
        }


        async function fetchAndRenderTimeslots(timeSlots = []) {
            try {
                const dropdown = document.getElementById("timeslotDropdown");
                dropdown.innerHTML = `
                <option value="">Select Timeslot</option>
                <option value="all">All</option>`;

                timeSlots.forEach((slot) => {
                if (slot.type === "2") {
                    formatRecurringTimeslot(slot).forEach((formattedSlot) => {
                    const option = document.createElement("option");
                    option.value = formattedSlot.value;
                    option.textContent = formattedSlot.label;
                    dropdown.appendChild(option);
                    });
                } else {
                    const option = document.createElement("option");
                    option.value = slot.timeSlotId;
                    option.textContent = formatTimeslot(slot);
                    dropdown.appendChild(option);
                }
                });
            } catch (error) {
                console.error("Error fetching timeslots:", error);
                document.getElementById("timeslotDropdown").innerHTML = `<option disabled>Error loading timeslots</option>`;
            }
        }

        const timeslotDropdown = document.getElementById("timeslotDropdown");
        timeslotDropdown.addEventListener("change", handleSelectTimeslot);
    });
</script>